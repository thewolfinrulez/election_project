import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from bd_models import Candidates, Students, Votes
import config as cfg

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(cfg.bot_token)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SQLAlchemy
engine = create_engine(cfg.db_url)
SessionLocal = sessionmaker(bind=engine)


@bot.message_handler(commands=['start'])
def start_handler(message):
    with SessionLocal() as session:
        student = session.query(Students).filter_by(s_chat_id=str(message.chat.id)).first()
        if student:
            bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {student.s_code}!")
        else:
            bot.reply_to(
                message,
                f"–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π —Å–≤–æ–π st000000, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."
            )
            bot.register_next_step_handler(message, process_student_id)


def process_student_id(message):
    student_id = message.text
    with SessionLocal() as session:
        student = session.query(Students).filter_by(s_code=student_id).first()
        if student:
            student.s_chat_id = str(message.chat.id)
            session.commit()
            bot.reply_to(message, f"‚úÖ st –Ω–∞–π–¥–µ–Ω! –ü—Ä–∏–≤–µ—Ç, {student.s_code}!")
            bot.reply_to(message, f"–í–≤–µ–¥–∏ /vote, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
        else:
            bot.reply_to(message, "‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º st –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, process_student_id)


@bot.message_handler(commands=['vote'])
def vote_handler(message):
    with SessionLocal() as session:
        student = session.query(Students).filter_by(s_chat_id=str(message.chat.id)).first()
        if student:
            student_vote = session.query(Votes).filter_by(v_student_id=student.s_id)
            if student_vote.count() > 0:
                student_vote = student_vote.first()
                candidate = session.query(Candidates).filter_by(c_id=student_vote.v_candidate_id).first()
                bot.reply_to(message, f"–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {candidate.c_name}")
            else:
                candidates = session.query(Candidates).filter_by(c_active=True).filter_by(
                    c_program_id=student.s_program_id).all()
                markup = InlineKeyboardMarkup()
                for c in candidates:
                    markup.add(InlineKeyboardButton(text=c.c_name, callback_data=f"vote_{c.c_id}"))
                    with open(f"images/{c.c_photo_path}", "rb") as photo:
                        print(c.c_name)
                        bot.send_photo(
                            message.chat.id,
                            photo,
                            caption=f"{c.c_name}\n\n{c.c_message}",
                            parse_mode='HTML'
                        )
                    # bot.send_message(message.chat.id, f"{c.c_name}\n\n{c.c_message}", parse_mode='HTML')
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", reply_markup=markup)
        else:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@bot.callback_query_handler(func=lambda call: call.data.startswith("vote_"))
def process_vote_callback(call):
    candidate_id = int(call.data.replace("vote_", ""))

    with SessionLocal() as session:
        student = session.query(Students).filter_by(s_chat_id=str(call.message.chat.id)).first()
        if not student:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start.")
            return

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if session.query(Votes).filter_by(v_student_id=student.s_id).count() > 0:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
            return

        candidate = session.query(Candidates).filter_by(c_id=candidate_id).first()
        if not candidate:
            bot.answer_callback_query(call.id, "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç.")
            return

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –≥–æ–ª–æ—Å–µ
        new_vote = Votes(v_candidate_id=candidate_id, v_student_id=student.s_id)
        session.add(new_vote)
        session.commit()

        bot.answer_callback_query(call.id, f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞ {candidate.c_name} —É—á—Ç—ë–Ω!")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å –∑–∞ {candidate.c_name} —É—á—Ç—ë–Ω ‚úÖ"
        )


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    bot.polling(none_stop=True)
